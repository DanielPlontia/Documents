생성관련
팩토리 패턴은 객체를 만드는 과정에 집중한 패턴
구체적인 객체 생성 과정을 하위 클래스로 옮기는게 목적임
-> 팩토리 인터페이스를 구현하여 객체를 생성하도록 함(Create하는 method를 제공)
(장) OCP원칙을 지킬 수 있음(수정에 열리고 확장에 닫힘)
(단) 타입이 다른 다양한 객체를 사용할 경우에 구현을 다시해야함

추상팩토리 패턴은 팩토리를 사용하는 클라이언트에 집중한 패턴
연관되거나 의존적인 여러종류의 객체를 concrete(구체적) 클래스에 의존하지 않고 많들 수 있게 하는게 목적임
-> 팩토리 객체가 아니라 다른 객체 
(장) 콘크리트(구체적) 클래스에 의존하지 않고 다양한 객체 생성 가능
(단) 타입이 아니라 아예 새로운 종류의 제품을 제공하는데에 문제가 있을 수 있다(?)

--------------------------------------------------------------------------

퍼사드패턴은 복잡한 시스템에 대한 엑세스를 제공하기 위해 간단한 통합 인터페이스를 제공하는 패턴
서브시스템이 퍼사드의 존재를 모름
(장) 클라이언트와 서브시스템간의 커플링을 줄일 수 있다.
(단) 퍼사드에 기능을 추가하기 어렵다

미디에이터(중제자) 패턴은 중제자가 다수의 객체를 조정해야하는 경우 사용함
중제자 패턴은 서브시스템이 중제자를 앎. 
강제적으로 모든 서브시스템에게 동일한 정책을 제공하는게 아니라
각각의 서브 시스템에게 맞는 정책을 적용한다. 
(장) 중제자에 기능 추가가 가능하다

Adapter 는 중간에서 인터페이스 변환

Proxy 는 중간에서 대리하여 기존 구현을 다른 방식으로 컨트롤 

Decorator 기존 구현에 다른 구현을 추가 

Facade 가 복잡성을 감추는게 목적이라면 Bridge 는 상대방의 구현들을 직접 사용하면 강합 결합도가 발생하기 때문에 중간에서 매개체 삽입!! 좀 더 있어보이게 말하면 서브시스템(외부 모듈)의 구현으로부터 레이어를 두어 "디커플링/유연성증가"  를 하기 위한 의도가 강하다.


